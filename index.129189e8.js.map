{"mappings":"AAAA,MAAMA,YAAc,oBAEdC,OAASC,SAASC,uBAAuB,UAAU,GACnDC,gBAAkBH,OAAOE,uBAAuB,UAAU,GAC1DE,OAAS,IAAID,gBAAgBD,uBAAuB,UACpDG,cAAgB,IAAIL,OAAOE,uBAAuB,eAElDI,cAAgB,IAAMH,gBAAgBI,wBAAwBC,IAAM,GAEpEC,aAAgBC,GAASA,EAAKC,eAAe,CACjDC,SAAU,OACVC,MAJ0BV,gBAAgBI,wBAAwBC,IAAM,GAI/C,UAAY,SACrCM,OAAQ,YAGVT,cAAcU,SAAQ,CAACC,EAAQC,KAC7BD,EAAOE,iBAAiB,SAAS,WAC/B,IAAIC,KAAKC,UAAUC,SAAStB,aAQ5B,OANaK,OAAOa,GAVYN,eAAe,CACjDC,SAAU,OACVC,MAJ0BV,gBAAgBI,wBAAwBC,IAAM,GAI/C,UAAY,SACrCM,OAAQ,YASNT,cAAcU,SACZO,GAAKA,EAAEF,UAAUE,IAAMH,KAAO,MAAQ,UAAU,wBAG3C,CACT,OAGF,MAAMI,oBAAsB,KAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,OAAOqB,SAAUD,EAAG,CACtC,MAAME,KAAEA,EAAIC,MAAEA,GAAUvB,OAAOoB,GAAGjB,wBAC5BqB,GAAOF,EAAOC,GAAS,EAE7B,GAAIC,EAAM,GAAKC,OAAOC,MAAQF,EAAK,SAEnC,GAAIvB,cAAcmB,GAAGJ,UAAUC,SAAStB,aAAc,MAEjCM,cAAc0B,MAAKf,GAAUA,EAAOI,UAAUC,SAAStB,eAC/DqB,UAAUY,OAAOjC,aAC9BM,cAAcmB,GAAGJ,UAAUa,IAAIlC,aAC/B,KACF,GAGImC,SAAW,CAACC,EAAIC,KACpB,IAAIC,EAEJ,MAAO,IAAIC,KACTC,aAAaF,GACbA,EAAQG,YAAW,KAAQL,EAAGM,MAAMtB,KAAMmB,EAAA,GAAUF,EAAA,CACtD,EAGFjC,gBAAgBe,iBACd,SACAgB,SAASX,oBAAqB,IAC9B,CAAEmB,SAAS","sources":["js/main.js"],"sourcesContent":["const activeClass = 'slider-btn-active';\n\nconst slider = document.getElementsByClassName('slider')[0];\nconst slidesContainer = slider.getElementsByClassName('slides')[0];\nconst slides = [...slidesContainer.getElementsByClassName('slide')];\nconst sliderButtons = [...slider.getElementsByClassName('slider-btn')];\n\nconst isSlideInView = () => slidesContainer.getBoundingClientRect().top > 20;\n\nconst scrollToElem = (elem) => elem.scrollIntoView({\n  behavior: 'auto',\n  block: isSlideInView() ? 'nearest' : 'center',\n  inline: 'nearest',\n});\n\nsliderButtons.forEach((button, idx) => {\n  button.addEventListener('click', function () {\n    if (this.classList.contains(activeClass)) return;\n\n    scrollToElem(slides[idx]);\n\n    sliderButtons.forEach(\n      b => b.classList[b === this ? 'add' : 'remove']('slider-btn-active')\n    );\n\n    return false;\n  })\n});\n\nconst scrollEventListener = () => {\n  for (let i = 0; i < slides.length; ++i) {\n    const { left, right } = slides[i].getBoundingClientRect();\n    const mid = (left + right) / 2;\n\n    if (mid < 0 || screen.width < mid) continue;\n\n    if (sliderButtons[i].classList.contains(activeClass)) break;\n\n    const activeButton = sliderButtons.find(button => button.classList.contains(activeClass));\n    activeButton.classList.remove(activeClass);\n    sliderButtons[i].classList.add(activeClass);\n    break;\n  }\n}\n\nconst debounce = (fn, timeout) => {\n  let timer;\n\n  return (...args) => {\n    clearTimeout(timer);\n    timer = setTimeout(() => { fn.apply(this, args); }, timeout);\n  };\n}\n\nslidesContainer.addEventListener(\n  'scroll',\n  debounce(scrollEventListener, 40),\n  { passive: true },\n);\n"],"names":["activeClass","slider","document","getElementsByClassName","slidesContainer","slides","sliderButtons","isSlideInView","getBoundingClientRect","top","scrollToElem","elem","scrollIntoView","behavior","block","inline","forEach","button","idx","addEventListener","this","classList","contains","b","scrollEventListener","i","length","left","right","mid","screen","width","find","remove","add","debounce","fn","timeout","timer","args","clearTimeout","setTimeout","apply","passive"],"version":3,"file":"index.129189e8.js.map"}